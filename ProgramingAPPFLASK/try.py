data = [
    [
        "Python nedir?",
        "Python programlama dili veri bilimi, makine öğrenimi, sistem otomasyonu, web ve API geliştirme ve daha fazlası için bir temel yapıdır. \r\n1991'den beri Python programlama dili sadece gereksiz programlar için tamamlayıcı bir dil olarak değerlendiriliyordu. Hatta “Automate the Boring Stuff” (Türkçe'ye \"Sıkıcı Şeyleri Otomatikleştiren\" olarak çevirebileceğimiz popüler bir kitap) adında bir kitap dahi yayınlanmıştır. \r\n\r\nBununla birlikte son birkaç yılda Python modern yazılım geliştirme, altyapı yönetimi ve veri analizinde birinci sınıf bir programlama dili olarak ön plana çıkmıştır. Artık hackerlar için bir arka kapı oluşturucusu değil, web uygulaması oluşturma ve sistem yönetiminde önemli rol alma, veri analizleri ve makine öğreniminde parlayan bir dil olarak ün kazanmıştır.\r\n\r\nPython Programlama Dili Kullanmak ve Öğrenmek Oldukça Kolay\r\n\r\nDiğer karmaşık program dillerini öğrenmek çok zaman alır ve kullanım alanları büyük olmasından dolayı kullanımını öğrenmek çok zordur. Ancak Python sözdizimi hem okunabilir hem de ileriye dönüktür. Öğrenim, kararlı programlama dili sayesinde basittir. Yeni başlayanlar için de ideal bir seçim olarak ön plana gelir. Sonuç olarak, Python kullanarak program geliştirmeye yeni bir adım atmış olan herkes hızlı ve basit şekilde ilerleme kaydedebilir. Diğer karmaşık dillere göre basitlik söz konusu olduğunda, en önde yer almaktadır.\r\n\r\nPython Uygulanabilirdir ve Kullanım Çerçevesi Oldukça Geniştir\r\n\r\nİsminin az duyulmasına rağmen, yazılımcılar arasında hem popülerdir hem de yaygındır. Github projelerinin birçoğu Python tabanlıdır. Hatta Tiobe Index ve Github gibi programlama örneklerinin sıralandığı sistemlerde, Python tabanlı programları en üst sıralarda göstermektedir. Kullanım alanı en küçük işletim sistemlerinden en büyük işletim sistemlerine kadar birçok OS tarafından desteklenmektedir. İnternette yer alan büyük yazılım kütüphanelerin ve API-destekli servislerin mutlaka Python tabanlı bindings ya da wrappers’ları vardır. Bundan dolayı Python, bu servisler ile serbestçe arayüz oluşturur veya bu kütüphaneleri doğrudan kullanır. Yazılım dilleri arasında en hızlısı olmasa da çoklu platformlarda kullanılması bir adım önde olmasını sağlamıştır.\r\n\r\nPython Basit Bir Dil Değildir\r\n\r\nOluşturulan scriptlerin ve otomasyon programlarının çoğu Python kod şemalarını kapsasa da, Python ayrıca, hem bağımsız uygulamalar hem de web hizmetleri olarak profesyonel kalitede yazılımlar oluşturmak için kullanılır.\r\n\r\nPython Ne İçin Kullanılır?\r\n\r\nAyrıca, Ansible ve Salt gibi araçlarda sistem gereksinimlerini ve yapılandırmasını sağlayan, bunlara ek olarak web tarayıcıları veya uygulama GUI'leriyle etkileşimleri otomatikleştiren özellikleri de bulunmaktadır. Kısaca anlatmak gerekirse, Script oluşturmak ve otomasyon Python için buz dağının sadece görünen kısmıdır.\r\n\r\nPython ile Web Servisleri ve RESTful API’leri Kodlama\r\n\r\nPython içerisinde bulunan yerel kütüphaneler üçüncü parti web yazılımları ile birleştiğinde,  ortaya bir kaç satır kod ile daha hızlı bir website yönetimi elde edilebilir. REST API’lerin uygun kod blokları ile oluşturulması seri bir şekilde sitenin veri yürütme olayını hızlı yapmasına olanak sağlar. Özellikle Python’un son güncellemesi asinkron operasyonlarının daha güçlü bir yapıya dönüştürmüştür. Doğru kütüphaneler ile sitelerin saniyede binlerce kod istemine karşılık veri akışı sağlamasına yardımcı olmuştur.\r\n\r\nPython’un Kütüphaneleri\r\n\r\nPython'un son zamanlarda bu kadar üstün bir başarıya sahip olması, kendine özgü zengin ve bunlara ek olarak üçüncü taraf yazılımların ekosistemine dayanıyor. Python, hem güçlü bir standart kütüphaneden hem de üçüncü taraf geliştiricilerden kolayca elde edilen, edinilen bilgilerin de kolayca kullanılabilen kütüphanelerden destek alır. Bu programlama dili onlarca yıllık gelişmenin yanı sıra yapılan katkılarla daha da zenginleştirilmiştir.\r\n\r\nPython’un standart kütüphanesi, matematik, dizi işleme, dosya ve dizin erişimi, ağ oluşturma, asenkron işlemler, iş parçacığı, çoklu işlem yönetimi gibi yaygın programlama görevlerine yönelik modüller sağlar. Ayrıca aynı zamanda modern uygulamaların ihtiyaç duyduğu ortak, üst düzey programlama görevlerini yöneten JSON ve XML gibi yapılandırılmış dosya formatlarını okuma ve yazma, sıkıştırılmış dosyaları kullanma, internet protokolleri ve veri formatlarıyla çalışma (web sayfaları, URL'ler, e-posta) gibi modülleri de içerir. C-uyumlu yabancı fonksiyon arayüzünü ortaya çıkaran çoğu harici kod Python’un ctypes modülü ile erişilebilir.\r\n\r\nVarsayılan Python sürümü tam olarak gelişmemiş bir sürümdür. Ancak Tkinter üzerinden çoklu platform GUI kütüphanesi ve SQLite 3 veritabanının gömülü bir kopyası ile kullanılabilir.\r\n\r\nPython’u Alt Seviyeye Düşüren Özellikleri\r\n\r\nC #, Java ve Go programlama dilleri gibi Python da toplanan bellek yönetimine sahiptir. Yani programcı, nesneleri izlemek ve bırakmak için kod uygulamak zorunda kalmamasını sağlar. Normalde, çöp toplama arka planda otomatik olarak gerçekleşir, ancak bu bir performans sorunu ortaya çıkarırsa, bunu manuel olarak tetikleyebilir veya tamamen devre dışı bırakabilirsiniz.\r\n\r\nPython'un önemli bir yönü dinamizm bir yapıya sahip olmasıdır. Nesne tabanlı bir programlama dili olarak kullanıldığı için dildeki her şey, işlevler ve modüller de dahil olmak üzere, nesne olarak ele alınır. Bu sayede kullanılan nesneler üst düzey kod yazmayı çok daha kolay hale getirir. Geliştiriciler karmaşık nesne manipülasyonlarını yalnızca birkaç satır kod ile gerçekleştirebilir ve hatta bir uygulamanın parçalarını gerektiğinde değiştirilebilecek soyutlamalar düzenleyerek kullanabilirler.\r\n\r\nPython’un \"significant whitespace\" denilen boşuklar kullanması, Python’un en iyi ve en kötü özelliklerinden biri olarak değerlendirilebilir. Aşağıdaki ikinci satırdaki girinti sadece okunabilirlik için değildir; Python’un kullanımında ki kod sıralamasının bir parçasıdır. Python derlemesi, kontrol akışını göstermek için uygun girintileri kullanmayan kod satırlarını reddeder.\r\n\r\nPython’un Hızını Arttıracak Oldukça Fazla Yol Vardır\r\n\r\nGenel anlamda yavaş olarak değerlendirilen Python her zaman yavaş olmaz. Pek çok Python programı yavaştır, çünkü Python'da yer alan ve ya üçüncü taraf standart kütüphanelerdeki görevleri düzgün bir şekilde içe aktaramazlar. NumPy ve Pandas gibi kütüphaneleri kullanarak matematik ve istatistik işlemleri muazzam bir şekilde artırılabilir ve PyPy çalışma zamanı, birçok Python uygulaması için farkedilir miktarda hız sağlar.\r\n\r\nGenel olarak yazılımcılar arasında yer alan bir söz vardır. Programın %90'ı işlevselliğidir, geri kalan %10'u ise programın kodlarıdır. %10'luk dilimi optimize ettiğinizde programın hızlanması oldukça başarılı olacaktır. Python ile, Cython veya Numba gibi projeleri kullanarak bu yüzde 10'unu C'ye hatta assembly diline dönüştürebilirsiniz. Ancak ortaya çıkan sonuç, C'de oluşturulan programa göre biraz daha yavaş bir kullanım sergiler, ama C'nin hafıza mikroyönetimi özelliği gözardı edildiğinde C ile yarışabilecek potansiyele sahiptir."
    ],
    [
        "Java nedir?",
        "Java, web uygulamalarını kodlamada yaygın olarak kullanılan bir programlama dilidir. Yirmi yıldan uzun bir süredir geliştiriciler tarafından tercih edilen popüler bir dil olması nedeniyle günümüzde kullanımda olan milyonlarca Java uygulaması bulunmaktadır. Java çok platformlu, nesne odaklı ve ağ merkezli bir dil olup kendisi de bir platform olarak kullanılabilir. Mobil uygulamalar ve kurumsal yazılımlardan büyük veri uygulamalarına ve sunucu tarafı teknolojilere kadar her türlü yazılımı kodlamada kullanılabilecek hızlı, güvenli ve güvenilir bir programlama dilidir.\r\n\r\nMobil oyunlar ve bilgisayar oyunları dâhil birçok popüler video oyunu Java'da oluşturulmaktadır. Makine öğrenimi veya sanal gerçeklik gibi gelişmiş teknolojilerin kullanıldığı modern oyunlar bile Java teknolojisiyle oluşturulmaktadır.\r\n\r\nJava, WORA [Write Once and Run Anywhere (Bir Kez Yazın ve Her Yerde Çalıştırın)] felsefesine uygun yapısı sayesinde, merkezi olmayan bulut tabanlı uygulamalar için ideal seçimdir. Bulut sağlayıcıları, programlarını çok çeşitli platformlarda çalıştırmak için Java dilini seçmektedir.\r\n\r\nJava, karmaşık veri kümeleri ve devasa miktarda gerçek zamanlı veri ile birlikte çalışabilecek veri işleme altyapıları için kullanılır.\r\n\r\nJava, geniş kapsamlı makine öğrenimi kitaplıkları sunar. Kararlı ve hızlı bir programlama dili olması nedeniyle doğal dil işleme ve derin öğrenme gibi yapay zeka uygulaması geliştirme çalışmaları için ideal seçimdir.\r\n\r\nJava, bağımsız olarak internete bağlanabilen uç cihazlardaki sensörleri ve donanımları programlamak için kullanılmaktadır.\r\n\r\nJava, popülerliğini kullanım kolaylığına borçludur. Geliştiricilerin diğer programlama dilleri yerine Java'yı seçmeye devam etmesinin altında yatan bazı nedenler:\r\n\r\nYüksek kaliteli öğrenme kaynakları\r\nJava uzun zamandır piyasada, dolayısıyla yeni programcıların başvurabileceği birçok öğrenme kaynağı mevcut. Ayrıntılı belgeler, kapsamlı kitaplar ve kurslar, tüm öğrenme eğrisi boyunca geliştiricilere destek olmaktadır. Ek olarak, yeni başlayanlar Advanced Java'ya geçmeden önce Core Java'da kod yazarak işe başlayabilir.\r\n\r\nEntegre fonksiyonlar ve kitaplıklar\r\nGeliştiriciler Java'yı kullanırken her yeni fonksiyonu sıfırdan yazmak zorunda kalmaz. Çok çeşitli uygulamalar geliştirmek için Java'nın sunduğu zengin entegre fonksiyon ve kitaplık ekosisteminden yararlanabilirler. \r\n\r\nEtkin topluluk desteği\r\nJava çok sayıda etkin kullanıcının yanı sıra kodlama sırasında zorlukla karşılaşan geliştiricilere destek olabilecek bir topluluğa sahiptir. Ayrıca, Java platform yazılımının bakım ve güncellemeleri düzenli olarak yapılmaktadır.\r\n\r\nYüksek kaliteli geliştirme araçları\r\nJava otomatik düzenleme, hata ayıklama, test, dağıtım ve değişiklik yönetimi süreçlerini destekleyen çeşitli araçlar sunmaktadır. Bu araçlar Java ile programlamayı hem zaman hem de maliyet açısından verimli kılmaktadır.\r\n\r\nPlatformdan Bağımsız\r\nJava kodu, yeniden yazma gerekmeksizin Windows, Linux, iOS veya Android gibi altta yatan herhangi bir platformda çalışabilir. Bu durum Java'yı, uygulamaların birden çok cihazda çalışabilmesi istenilen günümüz ortamında özellikle güçlü kılmaktadır.\r\n\r\nGüvenlik\r\nKullanıcılar güvenilmeyen Java kodunu ağ üzerinden indirebilir ve zarara yol açamayacağı güvenli bir ortamda çalıştırabilir. Güvenilmeyen kod bir virüs yoluyla ana sisteme bulaşamaz ya da sabit diskte dosyaları okuyamaz veya dosya oluşturamaz. Java'daki güvenlik düzeyleri ve kısıtlamaları da son derece yapılandırılabilir niteliktedir.\r\n\r\nJava nasıl çalışır?\r\nTüm programlama dilleri makinelerle iletişim kurmak amacıyla kullanılan araçlardır. Makine donanımı yalnızca elektronik iletişime yanıt verir. Java gibi üst düzey programlama dilleri insan dili ile donanım dili arasında köprü görevi görür. Bir geliştiricinin Java'yı kullanabilmek için şu iki unsuru anlaması gerekir:\r\n\r\n1. Java dili ve API’leri\r\nGeliştirici ile Java platformu arasındaki ön uç iletişimi sağlar.\r\n\r\n2. Java Sanal Makinesi\r\nJava platformu ile altta yatan donanım arasındaki arka uç iletişimi sağlar. Şimdi bunların her birine aşağıda ayrıntılı olarak bakalım.\r\n\r\nJava nasıl çalışır?\r\nTüm programlama dilleri makinelerle iletişim kurmak amacıyla kullanılan araçlardır. Makine donanımı yalnızca elektronik iletişime yanıt verir. Java gibi üst düzey programlama dilleri insan dili ile donanım dili arasında köprü görevi görür. Bir geliştiricinin Java'yı kullanabilmek için şu iki unsuru anlaması gerekir:\r\n\r\n1. Java dili ve API’leri\r\nGeliştirici ile Java platformu arasındaki ön uç iletişimi sağlar.\r\n\r\n2. Java Sanal Makinesi\r\nJava platformu ile altta yatan donanım arasındaki arka uç iletişimi sağlar. Şimdi bunların her birine aşağıda ayrıntılı olarak bakalım.\r\n\r\nJava API'si nedir?\r\nJava, Java programlama dilinin söz dizimini ve semantiğini tanımlar. Temel veri türleri, if/else blokları, döngüler vb. algoritmaları yazmak için kullanılan temel sözcük dağarcığını ve kuralları içerir.\r\n\r\nAPI'ler, Java Platformu ile birlikte paketlenen önemli yazılım bileşenleridir. Bunlar, mevcut işlevleri kendi kodunuza ekleyip kullanmanıza olanak sağlayan önceden yazılmış Java programlarıdır. Java API'lerini, örneğin, tarih ve saati almak, matematik işlemleri gerçekleştirmek veya metinde değişiklikler yapmak için kullanabilirsiniz. \r\n\r\nBir geliştirici tarafından yazılan tüm Java uygulama kodlarında, Java API'lerinden ve Java kitaplıklarından alınan yeni ve mevcut kodlar bir araya getirilerek kullanılır.\r\n\r\nJava Sanal Makinesi nedir?\r\nJava Sanal Makinesi, Java platformu ile altta yatan makine donanımı arasında ek bir soyutlama katmanı görevi görür. Java kaynak kodu yalnızca Java Sanal Makinesi (JVM) yüklü makinelerde çalışabilir. Java Sanal Makinesi’ne neden ihtiyaç duyulduğunu anlamak için programlamanın tarihçesine bakmak gerekir.\r\n\r\nProgramlamanın tarihçesi\r\nDoğal programlama dilleri ilk ortaya çıktıklarında altta yatan donanımla nasıl iletişim kurduklarına bağlı olarak iki geniş kategoriye ayrılıyorlardı.\r\n\r\nDerleyiciler: Programın tamamı derleyicilerle doğal İngilizceyi andıran bir söz dizimiyle yazılır ve daha sonra dil tüm kodu makine koduna derler (veya çevirir). Derlenen kod daha sonra donanımda çalıştırılır.\r\nYorumlayıcılar: Yorumlayıcılar kullanıldığında her üst düzey kod ifadesi anında makine koduna yorumlanır.  Yazılan ifadeler donanım tarafından bir sonraki ifadeye bakılmadan hemen çalıştırılır.\r\nJava çalışma zamanı ortamı\r\nJava programı bir Java Sanal Makinesi (JVM) kullanarak yukarıdaki iki yöntemi bir araya getiren ilk dil oldu. Java kod derleyicisi, Java Sanal Makinesi olarak adlandırılmaktadır. Tüm Java dosyaları ilk önce bytecode'a derlenir. Java bytecode yalnızca JVM'de çalışabilir. JVM daha sonra bytecode'u altta yatan donanım platformunda çalıştırmak için yorumlar. Dolayısıyla, uygulama bir Windows makinede çalışıyorsa JVM bu uygulamayı Windows için yorumlar. Ancak, Linux gibi bir açık kaynak platformda çalışıyorsa JVM bu uygulamayı Linux için yorumlar. \r\n\r\n\r\n"
    ]
]


for datas in data:
    print({
        "mission" : datas[0],
        "description" : datas[1]
    })